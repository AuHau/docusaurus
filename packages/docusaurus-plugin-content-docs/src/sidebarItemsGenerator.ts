/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

import {
  SidebarItem,
  SidebarItemDoc,
  SidebarItemCategory,
  DocMetadataBase,
  SidebarItemsGenerator,
} from './types';
import {sortBy, take, last, orderBy} from 'lodash';
import {addTrailingSlash} from '@docusaurus/utils';
import {Joi} from '@docusaurus/utils-validation';
import {extractNumberPrefix} from './numberPrefix';
import chalk from 'chalk';
import path from 'path';
import fs from 'fs-extra';
import Yaml from 'js-yaml';

const BreadcrumbSeparator = '/';

type CategoryMetadatasFile = {
  label?: string;
  sidebar_position?: number;
};

type WithPosition = {position?: number};
type SidebarItemWithPosition = SidebarItem & WithPosition;

const CategoryMetadatasFileSchema = Joi.object<CategoryMetadatasFile>({
  label: Joi.string().optional(),
  sidebar_position: Joi.number().optional(),
});

async function readCategoryMetadatasFile(
  categoryDirPath: string,
): Promise<CategoryMetadatasFile | null> {
  function assertCategoryMetadataFile(
    content: unknown,
  ): asserts content is CategoryMetadatasFile {
    Joi.attempt(content, CategoryMetadatasFileSchema);
  }

  async function tryReadFile(
    fileNameWithExtension: string,
    parse: (content: string) => unknown,
  ): Promise<CategoryMetadatasFile | null> {
    const filePath = path.join(categoryDirPath, fileNameWithExtension);
    if (await fs.pathExists(filePath)) {
      const contentString = await fs.readFile(filePath, {encoding: 'utf8'});
      const unsafeContent: unknown = parse(contentString);
      try {
        assertCategoryMetadataFile(unsafeContent);
        return unsafeContent;
      } catch (e) {
        console.error(
          chalk.red(
            `The docs sidebar category metadata file looks invalid!\nPath=${filePath}`,
          ),
        );
        throw e;
      }
    }
    return null;
  }

  const baseFilename = '_category_'; // should this be configurable?

  return (
    (await tryReadFile(`${baseFilename}.json`, JSON.parse)) ??
    (await tryReadFile(`${baseFilename}.yml`, Yaml.load)) ??
    // eslint-disable-next-line no-return-await
    (await tryReadFile(`${baseFilename}.yaml`, Yaml.load))
  );
}

function parseBreadcrumb(
  breadcrumb: string[],
): {parents: string[]; tail: string} {
  return {
    parents: take(breadcrumb, breadcrumb.length - 1),
    tail: last(breadcrumb)!,
  };
}

// TODO allow to customize this logic (docs cfg+sidebar.js)
// TODO define and document proper API surface
export const DefaultSidebarItemsGenerator: SidebarItemsGenerator = async ({
  item,
  docs: allDocs,
  version,
}): Promise<SidebarItem[]> => {
  // Doc at the root of the autogenerated sidebar dir
  function isRootDoc(doc: DocMetadataBase) {
    return doc.sourceDirName === item.dirPath;
  }

  // Doc inside a subfolder of the autogenerated sidebar dir
  function isCategoryDoc(doc: DocMetadataBase) {
    if (isRootDoc(doc)) {
      return false;
    }

    return (
      // autogen dir is . and doc is in subfolder
      item.dirPath === '.' ||
      // autogen dir is not . and doc is in subfolder
      // "api/myDoc" startsWith "api/" (note "api2/myDoc" is not included)
      doc.sourceDirName.startsWith(addTrailingSlash(item.dirPath))
    );
  }

  function isInAutogeneratedDir(doc: DocMetadataBase) {
    return isRootDoc(doc) || isCategoryDoc(doc);
  }

  // autogenDir=a/b and docDir=a/b/c/d => returns c/d
  // autogenDir=a/b and docDir=a/b => returns .
  function getDocDirRelativeToAutogenDir(doc: DocMetadataBase): string {
    if (!isInAutogeneratedDir(doc)) {
      throw new Error(
        'getDocDirRelativeToAutogenDir() can only be called for  subdocs of the sidebar autogen dir',
      );
    }
    // Is there a node API to compare 2 relative paths more easily?
    // path.relative() does not give good results
    if (item.dirPath === '.') {
      return doc.sourceDirName;
    } else if (item.dirPath === doc.sourceDirName) {
      return '.';
    } else {
      return doc.sourceDirName.replace(addTrailingSlash(item.dirPath), '');
    }
  }

  /*
  console.log(
    'allDocs',
    allDocs.map((d) => ({
      source: d.source,
      dir: d.sourceDirName,
      isRootDoc: isRootDoc(d),
      isCategoryDoc: isCategoryDoc(d),
    })),
  );
   */

  // Get only docs in the autogen dir
  // Sort by folder+filename at once
  const docs = sortBy(allDocs.filter(isInAutogeneratedDir), (d) => d.source);

  if (docs.length === 0) {
    console.warn(
      chalk.yellow(
        `No docs found in dir ${item.dirPath}: can't auto-generate a sidebar`,
      ),
    );
  }

  /*
  console.log(
    'docs',
    docs.map((d) => ({
      source: d.source,
      dir: d.sourceDirName,
    })),
  );
   */

  function createDocSidebarItem(
    doc: DocMetadataBase,
  ): SidebarItemDoc & WithPosition {
    return {
      type: 'doc',
      id: doc.id,
      ...(doc.frontMatter.sidebar_label && {
        label: doc.frontMatter.sidebar_label,
      }),
      ...(typeof doc.sidebarPosition !== 'undefined' && {
        position: doc.sidebarPosition,
      }),
    };
  }

  async function createCategorySidebarItem({
    breadcrumb,
  }: {
    breadcrumb: string[];
  }): Promise<SidebarItemCategory & WithPosition> {
    const categoryDirPath = path.join(
      version.contentPath,
      breadcrumb.join(BreadcrumbSeparator),
    );

    const categoryMetadatas = await readCategoryMetadatasFile(categoryDirPath);

    const {tail} = parseBreadcrumb(breadcrumb);

    const {filename, numberPrefix} = extractNumberPrefix(tail);

    const position = categoryMetadatas?.sidebar_position ?? numberPrefix;

    return {
      type: 'category',
      label: categoryMetadatas?.label ?? filename,
      items: [],
      collapsed: true, // TODO use default value
      ...(typeof position !== 'undefined' && {position}),
    };
  }

  // Not sure how to simplify this algorithm :/
  async function autogenerateSidebarItems(): Promise<
    SidebarItemWithPosition[]
  > {
    const sidebarItems: SidebarItem[] = []; // mutable result

    const categoriesByBreadcrumb: Record<string, SidebarItemCategory> = {}; // mutable cache of categories already created

    async function getOrCreateCategoriesForBreadcrumb(
      breadcrumb: string[],
    ): Promise<SidebarItemCategory | null> {
      if (breadcrumb.length === 0) {
        return null;
      }
      const {parents} = parseBreadcrumb(breadcrumb);
      const parentCategory = await getOrCreateCategoriesForBreadcrumb(parents);
      const existingCategory =
        categoriesByBreadcrumb[breadcrumb.join(BreadcrumbSeparator)];

      if (existingCategory) {
        return existingCategory;
      } else {
        const newCategory = await createCategorySidebarItem({
          breadcrumb,
        });
        if (parentCategory) {
          parentCategory.items.push(newCategory);
        } else {
          sidebarItems.push(newCategory);
        }
        categoriesByBreadcrumb[
          breadcrumb.join(BreadcrumbSeparator)
        ] = newCategory;
        return newCategory;
      }
    }

    // Get the category breadcrumb of a doc (relative to the dir of the autogenerated sidebar item)
    function getRelativeBreadcrumb(doc: DocMetadataBase): string[] {
      const relativeDirPath = getDocDirRelativeToAutogenDir(doc);
      if (relativeDirPath === '.') {
        return [];
      } else {
        return relativeDirPath.split(BreadcrumbSeparator);
      }
    }

    async function handleDocItem(doc: DocMetadataBase): Promise<void> {
      const breadcrumb = getRelativeBreadcrumb(doc);
      const category = await getOrCreateCategoriesForBreadcrumb(breadcrumb);

      const docSidebarItem = createDocSidebarItem(doc);
      if (category) {
        category.items.push(docSidebarItem);
      } else {
        sidebarItems.push(docSidebarItem);
      }
    }

    // async process made sequential on purpose! order matters
    for (const doc of docs) {
      // eslint-disable-next-line no-await-in-loop
      await handleDocItem(doc);
    }

    // console.log({sidebarItems});

    return sidebarItems;
  }

  const sidebarItems = await autogenerateSidebarItems();

  /*
  console.log({
    unsorted: sidebarItems,
    sorted: sortSidebarItems(sidebarItems),
  });

   */

  return sortSidebarItems(sidebarItems);
};

// Recursively sort the categories/docs + remove the "position" attribute from final output
function sortSidebarItems(
  sidebarItems: SidebarItemWithPosition[],
): SidebarItem[] {
  const processedSidebarItems = sidebarItems.map((item) => {
    if (item.type === 'category') {
      return {
        ...item,
        items: sortSidebarItems(item.items),
      };
    }
    return item;
  });

  const sortedSidebarItems = orderBy(
    processedSidebarItems,
    (item) => item.position,
    ['asc'],
  );

  return sortedSidebarItems.map(({position: _removed, ...item}) => item);
}
